import React, {useRef, useEffect, useState} from "react"
import {EChartsOption, SelectChangedEvent, VulnerabilityLevelPieProps} from "./VulnerabilityLevelPieType"
import * as echarts from "echarts"
import classNames from "classnames"
import styles from "./VulnerabilityLevelPie.module.scss"
import {useCreation, useMemoizedFn, useUpdateEffect} from "ahooks"

const dataMapColor = {
    0: {
        selectColor: "rgba(211, 58, 48, 1)",
        color: "rgba(211, 58, 48, 0.3)"
    },
    1: {
        selectColor: "rgba(246, 84, 74, 1)",
        color: "rgba(246, 84, 74, 0.3)"
    },
    2: {
        selectColor: "rgba(255, 182, 96, 1)",
        color: "rgba(255, 182, 96, 0.3)"
    },
    3: {
        selectColor: "rgba(255, 213, 131, 1)",
        color: "rgba(255, 213, 131, 0.3)"
    },
    4: {
        selectColor: "rgba(86, 201, 145, 1)",
        color: "rgba(86, 201, 145, 0.3)"
    }
}
const testData = [
    {
        value: 300,
        name: "严重",
        selected: true,
        select: {
            itemStyle: {
                color: dataMapColor[0].selectColor
            }
        }
    },
    {
        value: 280,
        name: "高危",
        selected: true,
        select: {
            itemStyle: {
                color: dataMapColor[1].selectColor
            }
        }
    },
    {
        value: 260,
        name: "中危",
        selected: true,
        select: {
            itemStyle: {
                color: dataMapColor[2].selectColor
            }
        }
    },
    {
        value: 240,
        name: "低危",
        selected: true,
        select: {
            itemStyle: {
                color: dataMapColor[3].selectColor
            }
        }
    },
    {
        value: 250,
        name: "指纹",
        selected: true,
        select: {
            itemStyle: {
                color: dataMapColor[4].selectColor
            }
        }
    }
]
export const VulnerabilityLevelPie: React.FC<VulnerabilityLevelPieProps> = React.memo((props) => {
    const {className = ""} = props
    const chartRef = useRef(null)
    const [select, setSelect] = useState<string[]>(["严重", "高危", "中危", "低危", "指纹"])

    const data = useCreation(() => {
        return testData
    }, [testData])
    const optionRef = useRef<EChartsOption>({
        series: [
            {
                type: "pie",
                radius: [15, 95],
                roseType: "radius",
                itemStyle: {
                    color: (params) => {
                        return dataMapColor[params.dataIndex].color
                    },
                    borderRadius: 4
                },
                minAngle: 20,
                data,
                percentPrecision: 0,
                label: {
                    fontSize: 12,
                    color: "#31343F",
                    formatter: "{b}\n{d}%",
                    lineHeight: 16,
                    overflow: "break"
                },
                selectedMode: "multiple",
                selectedOffset: 0,
                select: {
                    itemStyle: {}
                },
                emphasis: {
                    scale: true,
                    scaleSize: 5
                },
                labelLine: {
                    length: 5,
                    length2: 10
                }
            }
        ]
    })
    const pieChart = useRef<echarts.ECharts>()
    useEffect(() => {
        pieChart.current = echarts.init(chartRef.current)
        pieChart.current.setOption(optionRef.current)
        pieChart.current.on("selectchanged", onSelectChanged)
        return () => {
            if (pieChart.current) {
                pieChart.current.off("selectchanged", onSelectChanged)
                pieChart.current.dispose()
            }
        }
    }, [])

    /**数据选中状态发生变化时触发的事件 */
    const onSelectChanged = useMemoizedFn((value) => {
        const {fromAction, fromActionPayload} = value as any as SelectChangedEvent
        //不额外处理全选
        if (fromAction === "toggleSelect") {
            return
        }
        const {dataIndexInside} = fromActionPayload
        const selectName = data[dataIndexInside].name
        let newSelect = [...select]
        switch (fromAction) {
            case "select":
                if (newSelect.length > 0 && newSelect.includes(selectName)) return
                newSelect.push(selectName)
                break
            case "unselect":
                newSelect = select.filter((ele) => ele != selectName)
                break
            default:
                break
        }
        /** 当最后一个选中状态被取消时，默认全选 */
        if (newSelect.length == 0) {
            newSelect = data.map((ele) => ele.name)
            pieChart.current?.dispatchAction({
                type: "toggleSelect",
                seriesIndex: 0, // 选择第一个系列
                dataIndex: Array.from({length: data.length}, (_, i) => i) // 选择所有数据项
            })
        }
        setSelect(newSelect)
    })
    return <div className={classNames(styles["vulnerability-level-pie"], className)} ref={chartRef}></div>
})
