import React, {useRef, useEffect} from "react"
import {VulnerabilityLevelPieProps} from "./VulnerabilityLevelPieType"
import * as echarts from "echarts"
import classNames from "classnames"
import styles from "./VulnerabilityLevelPie.module.scss"

type EChartsOption = echarts.EChartsOption

export const VulnerabilityLevelPie: React.FC<VulnerabilityLevelPieProps> = React.memo((props) => {
    const {className = ""} = props
    const chartRef = useRef(null)
    const optionRef = useRef<EChartsOption>({
        color: ["#D33A30", "#F6544A", "#FFB660", "#FFD583", "#56C991"],
        series: [
            {
                type: "pie",
                radius: [20, 90],
                roseType: "radius",
                itemStyle: {
                    borderRadius: 8,
                    opacity: 0.5
                },
                minAngle: 20,
                data: [
                    {value: 300, name: "严重"},
                    {value: 280, name: "高危"},
                    {value: 260, name: "中危"},
                    {value: 240, name: "低危"},
                    {value: 250, name: "指纹"}
                ],
                percentPrecision: 0,
                label: {
                    fontSize: 12,
                    color: "#31343F",
                    formatter: "{b}\n{d}%",
                    lineHeight: 16,
                    overflow: "break"
                },
                selectedMode: "multiple",
                selectedOffset: 0,
                select: {
                    itemStyle: {
                        opacity: 1
                    }
                },
                emphasis: {
                    scale: true,
                    scaleSize: 5
                },
                labelLine: {
                    length: 5,
                    length2: 10
                }
            }
        ]
    })
    useEffect(() => {
        const myChart = echarts.init(chartRef.current)
        setTimeout(() => {
            myChart.setOption(optionRef.current)
        }, 200)
        return () => {
            myChart.dispose()
        }
    }, [])
    return <div className={classNames(styles["vulnerability-level-pie"], className)} ref={chartRef}></div>
})
